
TITLE:: Cactus
summary:: The core class for the the Cactus framework
related:: Classes/Modules

DESCRIPTION::

A style agnostic framework for creative coding using the SuperCollider 
audio programming language. At its most basic level it will:

LIST::
## Create a project file structure with configuration, initialisation and cleanup files.
## Create a buffers folder from which it collects all sound files and make them available through an intuitive interface.
## [work in progress] Allow for defining quickstart templates for different types of projects using a (very) basic templating engine.
## [work in progress] Allow for the creation and access of modules of sound processes (not available yet).
::

CLASSMETHODS::

METHOD:: new
Create a new instance of link::Classes/Cactus::

ARGUMENT:: projectPath
A string denoting the path of the project. 
If the path exists link::Classes/Cactus:: 
will load it. If it does not exist it will 
create the initial structure.

NOTE::
You can use link::Classes/CactusGUI:: for ease of access
to creating and managing Cactus projects.
Start there if you are new to the framework.
::

returns:: A Cactus instance

METHOD:: at
A convenience global link::Classes/Dictionary::. It
can be used to store any value but it also stores the 
instance for every running project under the project name 
(the project name is the name of its main folder).

returns:: The contents at 'key'

code::
// For a project at folder /test
Cactus("/test");
Cactus.at['test']; // returns the instance 
::

INSTANCEMETHODS::

METHOD:: restart
This will re-initialise the project after running 'cleanup.scd'. It
will not rerun 'config.scd'.

METHOD:: clearBuffers
Free all buffers.

METHOD:: at
A convenience local link::Classes/Dictionary::. It
can be used to store any value.

code::
// For a project at folder /test
c = Cactus("/test");
c.at[\someValue] = 2;
c.at[\someValue];
::

METHOD:: projectName
Get the projectName.

METHOD:: buf
Get a buffer from the automatically loaded buffers (from the 'buffers' folder of
the project).

ARGUMENT:: name
The name of the buffer as a symbol. Providing the name of the file returns the
buffer. Providing the name of a folder returns a List of the buffers in the
folder.

code::
c = Cactus("/path/to/the/project");
// for a test.wav file found at the root of the buffers folder
c.buf("/test");
// for an asdf.wav file found in the folder moreSounds
c.buf("/moreSounds/asdf");
// get a List of all files in the moreSounds folder
c.buf("/moreSounds")
::

METHOD:: bufnums
Like 'buf' but returns bufnums instead of buffers.

METHOD:: projectPath
Returns the project path.

METHOD:: openProjectDir
Open the project directory using the OS file browser.

METHOD:: buffers
Return the Dictionary that contains all the buffers.

METHOD:: runTemplate
Apply a template to the project. A template provides an easy way to recall
common Cactus configurations.

ARGUMENT:: templateName
A symbol with the template name.

ARGUMENT:: options
An Event of options to be used by the template.
